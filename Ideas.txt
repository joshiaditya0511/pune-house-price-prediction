1. Train multiple models based on set of features:
    - For example, train one model without including luxury amenities because we can't ask the user to give input for each and every feature like each and every amenity they want. Let's keept that optional
    - If we find that a model is doing good despite excluding certain features, try to dig down on why that is. Like do these vestigial features have some relationship with the useful features that the model is able to extract? Is that why we are able to get same accuracy level? Or are these features simply not useful. (For example, consider number of lifts. Sounds like a good feature. But if the number of lifts isn't really independent as we thought it was i.e. we can figure out that if the number of floors is high, then obviously number of lifts will be high, then number of lists wil become useless.)
2. Check significance of all features w.r.t. price:
    - developerName: does developerName have any relationship with price with same metrics (in same localities)?


#########################################################################################################################################



<class 'pandas.core.frame.DataFrame'>
Index: 33194 entries, 0 to 33193
Data columns (total 54 columns):
 #   Column  Dtype   
---  ------                              --------------  -----   
 0   localityName                          string  
 1   landMarks                             string  
 2   locality                              string  
 3   price                                 Int64   
 4   nameOfSociety                         string  
 5   projectName                           string  
 6   carpetArea                            Int64   
 7   coveredArea                           Int64   
 8   carpetAreaSqft                        Int64   
 9   possessionStatus                      string  
 10  developerName                         string  
 11  flooringType                          string  
 12  floorNumber                           string  
 13  unitCountonFloor                      Int64   
 14  totalFloorNumber                      Int64   
 15  electricityStatus                     string  
 16  waterStatus                           string  
 17  longitude                             float64 
 18  latitude                              float64 
 19  transactionType                       string  
 20  facing                                string  
 21  ownershipType                         string  
 22  carParking                            string  
 23  furnished                             category
 24  bedrooms                              string  
 25  bathrooms                             string  
 26  numberOfBalconied                     string  
 27  propertyType                          category
 28  additionalRooms                       string  
 29  bookingAmountExact                    Int64   
 30  maintenanceChargesFrequency           category
 31  maintenanceCharges                    Int64   
 32  ageofcons                             category
 33  isVerified                            category
 34  listingTypeDesc                       category
 35  premiumProperty                       boolean 
 36  noOfLifts                             Int64   
 37  propertyAmenities                     string  
 38  facilitiesDesc                        string  
 39  uuid                                  string  
 40  flooringType_Vitrified                boolean 
 41  flooringType_CeramicTiles             boolean 
 42  flooringType_Marble                   boolean 
 43  flooringType_NormalTilesKotahStone    boolean 
 44  flooringType_Granite                  boolean 
 45  flooringType_Wooden                   boolean 
 46  flooringType_Mosaic                   boolean 
 47  flooringType_Marbonite                boolean 
 48  additionalRoom_PujaRoom               boolean 
 49  additionalRoom_Study                  boolean 
 50  additionalRoom_Store                  boolean 
 51  additionalRoom_ServantRoom            boolean 
 52  carParking_Open                       Int64   
 53  carParking_Covered                    Int64   
dtypes: Int64(11), boolean(13), category(6), float64(2), string(22)
memory usage: 10.5 MB

Here's the column wise details:

1. The details on locality of the property is given by these columns - [localityName, landMarks, locality]. Of these, localityName and locality are almost the same. A few values here and there are different. Different in the sense that for some rows,  for example locality has value "Pimple Saudagar" and localityName has value "Pimple Saudagar, Pimpri Chinchwad" or vice versa. That is, extra info in one of them. As for the landMarks column, it has landmarks in detail. It's not that useful for EDA as there are a lot lot more unique values for landmark than locality and localityName.
2. The price of the property is given in the price column. It's an integer throughout with few null values.
3. The name of the society/building/project is given in [nameOfSociety, projectName] columns. Like locality and localityName, these too have few unique values relative to the dataset size. Also, most of rows have same values for both these columns except a few hundred.
4. The area of the flat is given in [carpetArea, coveredArea] columns. The two areas are different. Generally, carpet area is smaller than covered area. Covered are also includes conventionally useless area like that of pillars, base, etc. In preliminary cleaning, I found that more number of carpetArea have null values than coveredArea. One good trick to impute carpetARea is to use coveredArea that is find relation between them to impute the values.
5. The column carpetAreaSqft gives the price per square feet of carpetArea.
6. The column possessionStatus is a categorical column describing the possession Status of the property with 3 possible values - 'Ready to Move', 'Under Construction' and 'Immediately'. However, there are a lot of missing values. Almost 25 percent.
7. The column developerName gives the name of the developer who has built or is building the project or society.
8. The column floorNumber is exactly what it looks like. It tells the floor number on which the flat is located in the building or apartment. The good thing is, it has almost no null values. The bad thing is, it's string type because of three specific unique values among rest of the numeric ones - 'Ground', 'Upper Basement' and 'Lower Basement'
9. For column 'unitCountonFloor' - I don't exactly know what it means. I thought it's the number of flats per floor. But, that might not be the case for all values because It also has values like 501, 703, etc. The 501 value might suggest 1st flat on 5th floor and the flat number is 501. I checked the occurrence of these weird values greater than 100 and they are very very few compared to others. The bad thing is almost half values are null.
10. The column totalFloorNumber gives the total number of floors in the building. Prelimary exploration showed a few outlier values like 100 and 200 but luckily, there are very few rows with these outlier values. Also a good thing is, there are very few null values in this column.
11. The column electricityStatus tells the condition of powercuts and electricity availability for that property. It's categorical with almost all values being category 'No/Rare Powercut' and rest categories combined don't even sum it to 100. The bad thing is half the values are null. And the rest half have just a single category except a few. Just from this I can tell that this feature isn't useful at all.
12. The column waterStatus is similar to electricityStatus but for water. Just like electricityStatus, here too half the rows are null and rest half have just a single value - '24 Hours Available' except a few of them. Similar to electricityStatus, this column or feature too seems useless at first glance.
13. The columns [longitude, latitude] are exactly what they look like. good thing is very few values are null. Bad thing is we don't exactly have a way of validating the data or checking for outliers and stuff. One tip is that this is bound by location of pune City. So, there's a upper and lower bound on the latitudes and longtitudes.
14. Column transactionType tells the type of transaction obviously. It's categorical with 2 majority categories being 'Resale' and 'New Property'. Rest of the categories ('Rent' and 'Others') combined don't even sum up to 50. So, they can be ignored probably. Also, because we don't want the rent transaction types. One more good thing is this column has only 35 null values.
15. The column facing tells the direction in which the property is facing like East, West, North-West, etc. This might look unimportant to a common man's eye. But, in India, there's something called Vastu that people believe in. According to that, the direction of the property is important. But, there are two unfortunate things about it. We can't quantify people's feelings and beliefs and how it affects the prices and second is that half the rows have null values.
16. The column ownershipType tells the type of ownership you get with the property. It's categorical with the four categories being 'Freehold', 'Co-operative Society', 'Leasehold' and 'Power of Attorney'. unfortunate thing is that 35-40 percent of the values are empty.
17. The columns [carParking_Open, carParking_Covered] have number of car parkings alloted for that property also in terms of whether those parkings are covered, open or one or many of both. They have integer values. There is a small issue though. There are some weird values in either or both columns like 15 or 503 or 201 which are obviously impossible. Here's what I think. When the property lister filled the details for properties with such values, they misinterpreted what they were supposed to fill. Maybe instead of filling the number of parking spaces alloted to the property, they filled total available parking spaces which would justify 15 as the value. Similary, someone might have filled the flat number as the parking ID for this value which might justify values like 203 and 501 where they look like flat numbers. Luckily, these weird numbers are few in quantity. Unfortunately though, more than half the values are null. Also for the rows where there are null values, either both carParking_Covered and carParking_Open are null or none of them are.
18. The column 'furnished' tells the furnishing type of the property. It's categorical with three categories - 'Unfurnished', 'Semi-furnished' and 'Furnished'. Good thing is, there are only a few hundred null values.
19. The columns [bedrooms, bathrooms] have the number of bedrooms and bathrooms obviously in numeric form except one unique value which is 'More than 10'. Both the columns have this value. However, the number of properties which have this value is negligible (less than 10). So, if needed, can be substituted as 11 or 15 or some number like that. Another good thing is, there are very few null values in these columns.
20. The column 'numberOfBalconied' is similar to bedrooms and bathrooms. It tells number of balconies in the property.
propertyType
additionalRooms
bookingAmountExact
maintenanceChargesFrequency
maintenanceCharges
ageofcons
isVerified
listingTypeDesc
premiumProperty
noOfLifts
propertyAmenities
facilitiesDesc
uuid
flooringType_Vitrified
flooringType_CeramicTiles
flooringType_Marble
flooringType_NormalTilesKotahStone
flooringType_Granite
flooringType_Wooden
flooringType_Mosaic
flooringType_Marbonite
additionalRoom_PujaRoom
additionalRoom_Study
additionalRoom_Store
additionalRoom_ServantRoom
carParking_Open
carParking_Covered

